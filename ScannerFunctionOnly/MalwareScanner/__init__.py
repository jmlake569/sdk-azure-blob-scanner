import logging
import json
import tempfile
import os
import azure.functions as func
import requests
from shared.scanner import Scanner
from datetime import datetime

def datetime_handler(obj):
    if isinstance(obj, datetime):
        return obj.isoformat()
    raise TypeError(f"Object of type {type(obj)} is not JSON serializable")

def main(msg: func.QueueMessage) -> None:
    try:
        # Parse the queue message
        message_text = msg.get_body().decode('utf-8')
        message = json.loads(message_text)
        logging.info(f"MalwareScanner processing message: {message_text}")
        
        # Extract blob info
        blob_url = message.get('blob_url')
        blob_name = message.get('blob_name')
        
        if not blob_url or not blob_name:
            raise ValueError("Message missing required blob_url or blob_name")
            
        # Download the file to a temporary location
        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            # Download blob content using the SAS URL
            response = requests.get(blob_url)
            response.raise_for_status()
            
            # Write to temp file
            temp_file.write(response.content)
            temp_file.flush()
            temp_path = temp_file.name
            
        try:
            # Scan the file
            with Scanner() as scanner:
                results = scanner.scan_file(temp_path, blob_name)
                # Convert results to dictionary for logging
                results_dict = {
                    'is_clean': results.is_clean,
                    'details': results.details,
                    'error': results.error,
                    'timestamp': results.timestamp
                }
                logging.info(f"Scan results for {blob_name}: {json.dumps(results_dict, default=datetime_handler)}")
                
        finally:
            # Clean up temp file
            if os.path.exists(temp_path):
                os.unlink(temp_path)
                
    except Exception as e:
        logging.error(f"Error in MalwareScanner: {str(e)}")
        raise
